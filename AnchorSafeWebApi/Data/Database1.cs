

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Libraries\Data\Web.config"
//     Connection String Name: "SiteSqlServer"
//     Connection String:      "Data Source=ORACLE;Initial Catalog=AnchorSafe;User ID=webmatrix;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 16.0.1150.1

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace AnchorSafe.Data
{

    #region Unit of work

    public interface IAnchorSafe_DbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<ArchivedLocations> ArchivedLocations { get; set; } // ArchivedLocations
        System.Data.Entity.DbSet<ArchivedSites> ArchivedSites { get; set; } // ArchivedSites
        System.Data.Entity.DbSet<ATempInspectionItemMedia> ATempInspectionItemMedia { get; set; } // A_Temp_InspectionItemMedia
        System.Data.Entity.DbSet<ATempInspectionItems> ATempInspectionItems { get; set; } // A_Temp_InspectionItems
        System.Data.Entity.DbSet<ATempInspections> ATempInspections { get; set; } // A_Temp_Inspections
        System.Data.Entity.DbSet<Categories> Categories { get; set; } // Categories
        System.Data.Entity.DbSet<Certificates> Certificates { get; set; } // Certificates
        System.Data.Entity.DbSet<Clients> Clients { get; set; } // Clients
        System.Data.Entity.DbSet<ClientUserLoginCodes> ClientUserLoginCodes { get; set; } // ClientUserLoginCodes
        System.Data.Entity.DbSet<ClientUsers> ClientUsers { get; set; } // ClientUsers
        System.Data.Entity.DbSet<Definitions> Definitions { get; set; } // Definitions
        System.Data.Entity.DbSet<DefinitionTypes> DefinitionTypes { get; set; } // DefinitionTypes
        System.Data.Entity.DbSet<DeviceMeta> DeviceMeta { get; set; } // DeviceMeta
        System.Data.Entity.DbSet<Documents> Documents { get; set; } // Documents
        System.Data.Entity.DbSet<DocumentType> DocumentType { get; set; } // DocumentType
        System.Data.Entity.DbSet<InspectionItemMedia> InspectionItemMedia { get; set; } // InspectionItemMedia
        System.Data.Entity.DbSet<InspectionItems> InspectionItems { get; set; } // InspectionItems
        System.Data.Entity.DbSet<InspectionItemStatus> InspectionItemStatus { get; set; } // InspectionItemStatus
        System.Data.Entity.DbSet<InspectionMeta> InspectionMeta { get; set; } // InspectionMeta
        System.Data.Entity.DbSet<InspectionReports> InspectionReports { get; set; } // InspectionReports
        System.Data.Entity.DbSet<Inspections> Inspections { get; set; } // Inspections
        System.Data.Entity.DbSet<InspectionStatus> InspectionStatus { get; set; } // InspectionStatus
        System.Data.Entity.DbSet<InspectionType> InspectionType { get; set; } // InspectionType
        System.Data.Entity.DbSet<Locations> Locations { get; set; } // Locations
        System.Data.Entity.DbSet<Logs> Logs { get; set; } // Logs
        System.Data.Entity.DbSet<LogType> LogType { get; set; } // LogType
        System.Data.Entity.DbSet<Sites> Sites { get; set; } // Sites
        System.Data.Entity.DbSet<Users> Users { get; set; } // Users

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AnchorSafe_DbContext : System.Data.Entity.DbContext, IAnchorSafe_DbContext
    {
        public System.Data.Entity.DbSet<ArchivedLocations> ArchivedLocations { get; set; } // ArchivedLocations
        public System.Data.Entity.DbSet<ArchivedSites> ArchivedSites { get; set; } // ArchivedSites
        public System.Data.Entity.DbSet<ATempInspectionItemMedia> ATempInspectionItemMedia { get; set; } // A_Temp_InspectionItemMedia
        public System.Data.Entity.DbSet<ATempInspectionItems> ATempInspectionItems { get; set; } // A_Temp_InspectionItems
        public System.Data.Entity.DbSet<ATempInspections> ATempInspections { get; set; } // A_Temp_Inspections
        public System.Data.Entity.DbSet<Categories> Categories { get; set; } // Categories
        public System.Data.Entity.DbSet<Certificates> Certificates { get; set; } // Certificates
        public System.Data.Entity.DbSet<Clients> Clients { get; set; } // Clients
        public System.Data.Entity.DbSet<ClientUserLoginCodes> ClientUserLoginCodes { get; set; } // ClientUserLoginCodes
        public System.Data.Entity.DbSet<ClientUsers> ClientUsers { get; set; } // ClientUsers
        public System.Data.Entity.DbSet<Definitions> Definitions { get; set; } // Definitions
        public System.Data.Entity.DbSet<DefinitionTypes> DefinitionTypes { get; set; } // DefinitionTypes
        public System.Data.Entity.DbSet<DeviceMeta> DeviceMeta { get; set; } // DeviceMeta
        public System.Data.Entity.DbSet<Documents> Documents { get; set; } // Documents
        public System.Data.Entity.DbSet<DocumentType> DocumentType { get; set; } // DocumentType
        public System.Data.Entity.DbSet<InspectionItemMedia> InspectionItemMedia { get; set; } // InspectionItemMedia
        public System.Data.Entity.DbSet<InspectionItems> InspectionItems { get; set; } // InspectionItems
        public System.Data.Entity.DbSet<InspectionItemStatus> InspectionItemStatus { get; set; } // InspectionItemStatus
        public System.Data.Entity.DbSet<InspectionMeta> InspectionMeta { get; set; } // InspectionMeta
        public System.Data.Entity.DbSet<InspectionReports> InspectionReports { get; set; } // InspectionReports
        public System.Data.Entity.DbSet<Inspections> Inspections { get; set; } // Inspections
        public System.Data.Entity.DbSet<InspectionStatus> InspectionStatus { get; set; } // InspectionStatus
        public System.Data.Entity.DbSet<InspectionType> InspectionType { get; set; } // InspectionType
        public System.Data.Entity.DbSet<Locations> Locations { get; set; } // Locations
        public System.Data.Entity.DbSet<Logs> Logs { get; set; } // Logs
        public System.Data.Entity.DbSet<LogType> LogType { get; set; } // LogType
        public System.Data.Entity.DbSet<Sites> Sites { get; set; } // Sites
        public System.Data.Entity.DbSet<Users> Users { get; set; } // Users

        static AnchorSafe_DbContext()
        {
            System.Data.Entity.Database.SetInitializer<AnchorSafe_DbContext>(null);
        }

        public AnchorSafe_DbContext()
            : base("Name=SiteSqlServer")
        {
        }

        public AnchorSafe_DbContext(string connectionString)
            : base(connectionString)
        {
        }

        public AnchorSafe_DbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AnchorSafe_DbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AnchorSafe_DbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public AnchorSafe_DbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ArchivedLocationsConfiguration());
            modelBuilder.Configurations.Add(new ArchivedSitesConfiguration());
            modelBuilder.Configurations.Add(new ATempInspectionItemMediaConfiguration());
            modelBuilder.Configurations.Add(new ATempInspectionItemsConfiguration());
            modelBuilder.Configurations.Add(new ATempInspectionsConfiguration());
            modelBuilder.Configurations.Add(new CategoriesConfiguration());
            modelBuilder.Configurations.Add(new CertificatesConfiguration());
            modelBuilder.Configurations.Add(new ClientsConfiguration());
            modelBuilder.Configurations.Add(new ClientUserLoginCodesConfiguration());
            modelBuilder.Configurations.Add(new ClientUsersConfiguration());
            modelBuilder.Configurations.Add(new DefinitionsConfiguration());
            modelBuilder.Configurations.Add(new DefinitionTypesConfiguration());
            modelBuilder.Configurations.Add(new DeviceMetaConfiguration());
            modelBuilder.Configurations.Add(new DocumentsConfiguration());
            modelBuilder.Configurations.Add(new DocumentTypeConfiguration());
            modelBuilder.Configurations.Add(new InspectionItemMediaConfiguration());
            modelBuilder.Configurations.Add(new InspectionItemsConfiguration());
            modelBuilder.Configurations.Add(new InspectionItemStatusConfiguration());
            modelBuilder.Configurations.Add(new InspectionMetaConfiguration());
            modelBuilder.Configurations.Add(new InspectionReportsConfiguration());
            modelBuilder.Configurations.Add(new InspectionsConfiguration());
            modelBuilder.Configurations.Add(new InspectionStatusConfiguration());
            modelBuilder.Configurations.Add(new InspectionTypeConfiguration());
            modelBuilder.Configurations.Add(new LocationsConfiguration());
            modelBuilder.Configurations.Add(new LogsConfiguration());
            modelBuilder.Configurations.Add(new LogTypeConfiguration());
            modelBuilder.Configurations.Add(new SitesConfiguration());
            modelBuilder.Configurations.Add(new UsersConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ArchivedLocationsConfiguration(schema));
            modelBuilder.Configurations.Add(new ArchivedSitesConfiguration(schema));
            modelBuilder.Configurations.Add(new ATempInspectionItemMediaConfiguration(schema));
            modelBuilder.Configurations.Add(new ATempInspectionItemsConfiguration(schema));
            modelBuilder.Configurations.Add(new ATempInspectionsConfiguration(schema));
            modelBuilder.Configurations.Add(new CategoriesConfiguration(schema));
            modelBuilder.Configurations.Add(new CertificatesConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientsConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientUserLoginCodesConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientUsersConfiguration(schema));
            modelBuilder.Configurations.Add(new DefinitionsConfiguration(schema));
            modelBuilder.Configurations.Add(new DefinitionTypesConfiguration(schema));
            modelBuilder.Configurations.Add(new DeviceMetaConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentsConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionItemMediaConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionItemsConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionItemStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionMetaConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionReportsConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionsConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationsConfiguration(schema));
            modelBuilder.Configurations.Add(new LogsConfiguration(schema));
            modelBuilder.Configurations.Add(new LogTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SitesConfiguration(schema));
            modelBuilder.Configurations.Add(new UsersConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region POCO classes

    // ArchivedLocations
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArchivedLocations
    {
        public int Id { get; set; } // Id (Primary key)
        public string LocationName { get; set; } // LocationName
        public int? SiteId { get; set; } // SiteId
        public int? SimProId { get; set; } // SimProId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime DateModified { get; set; } // DateModified
        public bool IsActive { get; set; } // IsActive

        public ArchivedLocations()
        {
            DateCreated = System.DateTime.Now;
            DateModified = System.DateTime.Now;
            IsActive = true;
        }
    }

    // ArchivedSites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArchivedSites
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ClientId { get; set; } // ClientId
        public string SiteName { get; set; } // SiteName
        public int? SimProId { get; set; } // SimProId
        public string Street { get; set; } // Street
        public string City { get; set; } // City
        public string State { get; set; } // State
        public string PostCode { get; set; } // PostCode
        public bool IsActive { get; set; } // IsActive
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateModified { get; set; } // DateModified

        public ArchivedSites()
        {
            IsActive = true;
            DateCreated = System.DateTime.Now;
        }
    }

    // A_Temp_InspectionItemMedia
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspectionItemMedia
    {
        public int Id { get; set; } // Id (Primary key)
        public int? InspectionItemId { get; set; } // InspectionItemId
        public int? OldInspectionItemId { get; set; } // OldInspectionItemId
        public string Media { get; set; } // Media
        public bool? IsSynced { get; set; } // IsSynced
        public System.Guid? Nonce { get; set; } // Nonce
    }

    // A_Temp_InspectionItems
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspectionItems
    {
        public int Id { get; set; } // Id (Primary key)
        public int? OldId { get; set; } // OldId
        public int? InspectionId { get; set; } // InspectionId
        public int? OldInspectionId { get; set; } // OldInspectionId
        public int? CategoryId { get; set; } // CategoryId
        public int? InspectionItemStatusId { get; set; } // InspectionItemStatusId
        public string Findings { get; set; } // Findings
        public string Recommendations { get; set; } // Recommendations
        public bool? IsSynced { get; set; } // IsSynced
        public int? ListingOrder { get; set; } // ListingOrder
        public System.Guid? Nonce { get; set; } // Nonce
    }

    // A_Temp_Inspections
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspections
    {
        public int Id { get; set; } // Id (Primary key)
        public int? OldId { get; set; } // OldId
        public int? NewId { get; set; } // NewId
        public int? ClientId { get; set; } // ClientId
        public int? SiteId { get; set; } // SiteId
        public int? LocationId { get; set; } // LocationId
        public System.DateTime? InspectionDate { get; set; } // InspectionDate
        public int? InspectionTypeId { get; set; } // InspectionTypeId
        public int? InspectionStatusId { get; set; } // InspectionStatusId
        public bool? IsLocked { get; set; } // IsLocked
        public System.DateTime? SyncDate { get; set; } // SyncDate
        public int? UserId { get; set; } // UserId
        public string Latitude { get; set; } // Latitude (length: 50)
        public string Longitude { get; set; } // Longitude (length: 50)
        public System.DateTime? DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime? DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId
        public int? SimProId { get; set; } // SimProId
        public System.DateTime? SimProSyncDate { get; set; } // SimProSyncDate
        public System.DateTime? NextInspectionDate { get; set; } // NextInspectionDate
        public bool? IsDeleted { get; set; } // IsDeleted
        public System.Guid? Nonce { get; set; } // Nonce
    }

    // Categories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Categories
    {
        public int Id { get; set; } // Id (Primary key)
        public string CategoryName { get; set; } // CategoryName
        public int CategoryOrder { get; set; } // CategoryOrder
        public bool IsActive { get; set; } // IsActive
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId
        public string Prefix { get; set; } // Prefix (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Definitions where [Definitions].[CategoryId] point to this entity (FK_Definitions_Categories)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Definitions> Definitions { get; set; } // Definitions.FK_Definitions_Categories
        /// <summary>
        /// Child InspectionItems where [InspectionItems].[CategoryId] point to this entity (FK_InspectionItems_Categories)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InspectionItems> InspectionItems { get; set; } // InspectionItems.FK_InspectionItems_Categories

        public Categories()
        {
            CategoryOrder = 1;
            IsActive = true;
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            Definitions = new System.Collections.Generic.List<Definitions>();
            InspectionItems = new System.Collections.Generic.List<InspectionItems>();
        }
    }

    // Certificates
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Certificates
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 500)
        public string Code { get; set; } // Code (length: 50)
        public string HeaderText { get; set; } // HeaderText
        public string FooterText { get; set; } // FooterText
    }

    // Clients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Clients
    {
        public int Id { get; set; } // Id (Primary key)
        public string ClientName { get; set; } // ClientName
        public int SimProId { get; set; } // SimProId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child Sites where [Sites].[ClientId] point to this entity (FK_Sites_Clients)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sites> Sites { get; set; } // Sites.FK_Sites_Clients

        public Clients()
        {
            DateCreated = System.DateTime.Now;
            Sites = new System.Collections.Generic.List<Sites>();
        }
    }

    // ClientUserLoginCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientUserLoginCodes
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public int ClientId { get; set; } // ClientId
        public string Code { get; set; } // Code (length: 10)
        public System.DateTime DateCreated { get; set; } // DateCreated

        public ClientUserLoginCodes()
        {
            Id = System.Guid.NewGuid();
            DateCreated = System.DateTime.Now;
        }
    }

    // ClientUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientUsers
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ClientId { get; set; } // ClientId
        public string FirstName { get; set; } // FirstName (length: 100)
        public string LastName { get; set; } // LastName (length: 100)
        public string Email { get; set; } // Email
        public string Mobile { get; set; } // Mobile
        public bool IsActive { get; set; } // IsActive
        public System.DateTime? LastLogin { get; set; } // LastLogin
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime LastModified { get; set; } // LastModified
        public bool IsLocked { get; set; } // IsLocked
        public int PreferredContact { get; set; } // PreferredContact
        public string Password { get; set; } // Password
        public bool IsAdmin { get; set; } // IsAdmin
        public bool PrivacyAgreement { get; set; } // PrivacyAgreement

        public ClientUsers()
        {
            IsActive = false;
            DateCreated = System.DateTime.Now;
            LastModified = System.DateTime.Now;
            IsLocked = false;
            PreferredContact = 1;
            IsAdmin = false;
            PrivacyAgreement = false;
        }
    }

    // Definitions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Definitions
    {
        public int Id { get; set; } // Id (Primary key)
        public int DefinitionTypeId { get; set; } // DefinitionTypeId
        public int CategoryId { get; set; } // CategoryId
        public string Description { get; set; } // Description
        public bool IsActive { get; set; } // IsActive
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId
        public int? AssociatedDefinitionId { get; set; } // AssociatedDefinitionId

        // Foreign keys

        /// <summary>
        /// Parent Categories pointed by [Definitions].([CategoryId]) (FK_Definitions_Categories)
        /// </summary>
        public virtual Categories Categories { get; set; } // FK_Definitions_Categories

        /// <summary>
        /// Parent DefinitionTypes pointed by [Definitions].([DefinitionTypeId]) (FK_Definitions_DefinitionTypes)
        /// </summary>
        public virtual DefinitionTypes DefinitionTypes { get; set; } // FK_Definitions_DefinitionTypes

        public Definitions()
        {
            IsActive = true;
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
        }
    }

    // DefinitionTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DefinitionTypes
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Definitions where [Definitions].[DefinitionTypeId] point to this entity (FK_Definitions_DefinitionTypes)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Definitions> Definitions { get; set; } // Definitions.FK_Definitions_DefinitionTypes

        public DefinitionTypes()
        {
            Definitions = new System.Collections.Generic.List<Definitions>();
        }
    }

    // DeviceMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DeviceMeta
    {
        public int Id { get; set; } // ID (Primary key)
        public string ReferenceType { get; set; } // ReferenceType (length: 50)
        public string ReferenceId { get; set; } // ReferenceId (length: 50)
        public string AppVersion { get; set; } // AppVersion (length: 50)
        public string Device { get; set; } // Device (length: 200)
        public string DeviceModel { get; set; } // DeviceModel (length: 200)
        public string Os { get; set; } // OS (length: 200)
        public string OsVersion { get; set; } // OSVersion (length: 200)
        public string Connection { get; set; } // Connection (length: 50)
        public string ExtraData { get; set; } // ExtraData (length: 200)
        public System.DateTime DateCreated { get; set; } // DateCreated

        public DeviceMeta()
        {
            ExtraData = "0";
            DateCreated = System.DateTime.Now;
        }
    }

    // Documents
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Documents
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title
        public string Description { get; set; } // Description
        public string FileName { get; set; } // FileName
        public int TypeId { get; set; } // TypeId
        public string MimeType { get; set; } // MimeType
        public int ClientId { get; set; } // ClientId
        public int? SiteId { get; set; } // SiteId
        public int? LocationId { get; set; } // LocationId
        public bool IsVisible { get; set; } // IsVisible
        public System.DateTime DateAdded { get; set; } // DateAdded
        public int? CreatedUserId { get; set; } // CreatedUserId
        public int? InspectionTypeId { get; set; } // InspectionTypeId
        public string DocumentAdditional { get; set; } // DocumentAdditional
        public string InspectionIds { get; set; } // InspectionIds

        public Documents()
        {
            Id = System.Guid.NewGuid();
            IsVisible = false;
            DateAdded = System.DateTime.Now;
        }
    }

    // DocumentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Type { get; set; } // Type (length: 200)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId

        public DocumentType()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // InspectionItemMedia
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItemMedia
    {
        public int Id { get; set; } // Id (Primary key)
        public int InspectionItemId { get; set; } // InspectionItemId
        public string Media { get; set; } // Media
        public bool IsSynced { get; set; } // IsSynced
        public System.Guid? Nonce { get; set; } // Nonce

        // Foreign keys

        /// <summary>
        /// Parent InspectionItems pointed by [InspectionItemMedia].([InspectionItemId]) (FK_InspectionItemMedia_InspectionItems)
        /// </summary>
        public virtual InspectionItems InspectionItems { get; set; } // FK_InspectionItemMedia_InspectionItems

        public InspectionItemMedia()
        {
            IsSynced = false;
        }
    }

    // InspectionItems
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItems
    {
        public int Id { get; set; } // Id (Primary key)
        public int InspectionId { get; set; } // InspectionId
        public int CategoryId { get; set; } // CategoryId
        public int InspectionItemStatusId { get; set; } // InspectionItemStatusId
        public string Findings { get; set; } // Findings
        public string Recommendations { get; set; } // Recommendations
        public bool IsSynced { get; set; } // IsSynced
        public int ListingOrder { get; set; } // ListingOrder
        public System.Guid Nonce { get; set; } // Nonce
        public string Priority { get; set; } // Priority (length: 50)
        public decimal? RoofPitch { get; set; } // RoofPitch

        // Reverse navigation

        /// <summary>
        /// Child InspectionItemMedia where [InspectionItemMedia].[InspectionItemId] point to this entity (FK_InspectionItemMedia_InspectionItems)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InspectionItemMedia> InspectionItemMedia { get; set; } // InspectionItemMedia.FK_InspectionItemMedia_InspectionItems

        // Foreign keys

        /// <summary>
        /// Parent Categories pointed by [InspectionItems].([CategoryId]) (FK_InspectionItems_Categories)
        /// </summary>
        public virtual Categories Categories { get; set; } // FK_InspectionItems_Categories

        /// <summary>
        /// Parent InspectionItemStatus pointed by [InspectionItems].([InspectionItemStatusId]) (FK_InspectionItems_InspectionItemStatus)
        /// </summary>
        public virtual InspectionItemStatus InspectionItemStatus { get; set; } // FK_InspectionItems_InspectionItemStatus

        /// <summary>
        /// Parent Inspections pointed by [InspectionItems].([InspectionId]) (FK_InspectionItems_Inspections)
        /// </summary>
        public virtual Inspections Inspections { get; set; } // FK_InspectionItems_Inspections

        public InspectionItems()
        {
            IsSynced = false;
            ListingOrder = 1;
            Nonce = System.Guid.NewGuid();
            InspectionItemMedia = new System.Collections.Generic.List<InspectionItemMedia>();
        }
    }

    // InspectionItemStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItemStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId

        // Reverse navigation

        /// <summary>
        /// Child InspectionItems where [InspectionItems].[InspectionItemStatusId] point to this entity (FK_InspectionItems_InspectionItemStatus)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InspectionItems> InspectionItems { get; set; } // InspectionItems.FK_InspectionItems_InspectionItemStatus

        public InspectionItemStatus()
        {
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            InspectionItems = new System.Collections.Generic.List<InspectionItems>();
        }
    }

    // InspectionMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionMeta
    {
        public int Id { get; set; } // ID (Primary key)
        public int InspectionId { get; set; } // InspectionId
        public string InspectionMetaValue { get; set; } // InspectionMetaValue
    }

    // InspectionReports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionReports
    {
        public int Id { get; set; } // Id (Primary key)
        public int InspectionId { get; set; } // InspectionId
        public string Url { get; set; } // URL
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int CreatedUserId { get; set; } // CreatedUserId

        public InspectionReports()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // Inspections
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Inspections
    {
        public int Id { get; set; } // Id (Primary key)
        public int ClientId { get; set; } // ClientId
        public int? SiteId { get; set; } // SiteId
        public int? LocationId { get; set; } // LocationId
        public System.DateTime? InspectionDate { get; set; } // InspectionDate
        public int? InspectionTypeId { get; set; } // InspectionTypeId
        public int? InspectionStatusId { get; set; } // InspectionStatusId
        public bool IsLocked { get; set; } // IsLocked
        public System.DateTime? SyncDate { get; set; } // SyncDate
        public int UserId { get; set; } // UserId
        public string Latitude { get; set; } // Latitude
        public string Longitude { get; set; } // Longitude
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId
        public int? SimProId { get; set; } // SimProId
        public System.DateTime? SimProSyncDate { get; set; } // SimProSyncDate
        public System.DateTime? NextInspectionDate { get; set; } // NextInspectionDate
        public bool IsDeleted { get; set; } // IsDeleted
        public System.Guid Nonce { get; set; } // Nonce
        public bool VisibleToClient { get; set; } // VisibleToClient
        public string InspectionNotes { get; set; } // InspectionNotes
        public bool ClientPortalOverride { get; set; } // ClientPortalOverride

        // Reverse navigation

        /// <summary>
        /// Child InspectionItems where [InspectionItems].[InspectionId] point to this entity (FK_InspectionItems_Inspections)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InspectionItems> InspectionItems { get; set; } // InspectionItems.FK_InspectionItems_Inspections

        // Foreign keys

        /// <summary>
        /// Parent InspectionStatus pointed by [Inspections].([InspectionStatusId]) (FK_Inspections_InspectionStatus)
        /// </summary>
        public virtual InspectionStatus InspectionStatus { get; set; } // FK_Inspections_InspectionStatus

        /// <summary>
        /// Parent InspectionType pointed by [Inspections].([InspectionTypeId]) (FK_Inspections_InspectionType)
        /// </summary>
        public virtual InspectionType InspectionType { get; set; } // FK_Inspections_InspectionType

        /// <summary>
        /// Parent Locations pointed by [Inspections].([LocationId]) (FK_Inspections_Locations)
        /// </summary>
        public virtual Locations Locations { get; set; } // FK_Inspections_Locations

        /// <summary>
        /// Parent Sites pointed by [Inspections].([SiteId]) (FK_Inspections_Sites)
        /// </summary>
        public virtual Sites Sites { get; set; } // FK_Inspections_Sites

        /// <summary>
        /// Parent Users pointed by [Inspections].([UserId]) (FK_Inspections_Users)
        /// </summary>
        public virtual Users Users { get; set; } // FK_Inspections_Users

        public Inspections()
        {
            IsLocked = false;
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            IsDeleted = false;
            Nonce = System.Guid.NewGuid();
            VisibleToClient = false;
            ClientPortalOverride = false;
            InspectionItems = new System.Collections.Generic.List<InspectionItems>();
        }
    }

    // InspectionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId

        // Reverse navigation

        /// <summary>
        /// Child Inspections where [Inspections].[InspectionStatusId] point to this entity (FK_Inspections_InspectionStatus)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Inspections> Inspections { get; set; } // Inspections.FK_Inspections_InspectionStatus

        public InspectionStatus()
        {
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            Inspections = new System.Collections.Generic.List<Inspections>();
        }
    }

    // InspectionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId

        // Reverse navigation

        /// <summary>
        /// Child Inspections where [Inspections].[InspectionTypeId] point to this entity (FK_Inspections_InspectionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Inspections> Inspections { get; set; } // Inspections.FK_Inspections_InspectionType

        public InspectionType()
        {
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            Inspections = new System.Collections.Generic.List<Inspections>();
        }
    }

    // Locations
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Locations
    {
        public int Id { get; set; } // Id (Primary key)
        public string LocationName { get; set; } // LocationName
        public int? SiteId { get; set; } // SiteId
        public int? SimProId { get; set; } // SimProId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime DateModified { get; set; } // DateModified
        public bool IsActive { get; set; } // IsActive

        // Reverse navigation

        /// <summary>
        /// Child Inspections where [Inspections].[LocationId] point to this entity (FK_Inspections_Locations)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Inspections> Inspections { get; set; } // Inspections.FK_Inspections_Locations

        // Foreign keys

        /// <summary>
        /// Parent Sites pointed by [Locations].([SiteId]) (FK_Locations_Sites)
        /// </summary>
        public virtual Sites Sites { get; set; } // FK_Locations_Sites

        public Locations()
        {
            DateCreated = System.DateTime.Now;
            DateModified = System.DateTime.Now;
            IsActive = true;
            Inspections = new System.Collections.Generic.List<Inspections>();
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Logs
    {
        public int Id { get; set; } // Id (Primary key)
        public int LogTypeId { get; set; } // LogTypeId
        public string Description { get; set; } // Description
        public int UserId { get; set; } // UserId
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys

        /// <summary>
        /// Parent LogType pointed by [Logs].([LogTypeId]) (FK_Logs_LogType)
        /// </summary>
        public virtual LogType LogType { get; set; } // FK_Logs_LogType

        public Logs()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // LogType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LogType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Logs where [Logs].[LogTypeId] point to this entity (FK_Logs_LogType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Logs> Logs { get; set; } // Logs.FK_Logs_LogType

        public LogType()
        {
            Logs = new System.Collections.Generic.List<Logs>();
        }
    }

    // Sites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sites
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ClientId { get; set; } // ClientId
        public string SiteName { get; set; } // SiteName
        public int? SimProId { get; set; } // SimProId
        public string Street { get; set; } // Street
        public string City { get; set; } // City
        public string State { get; set; } // State
        public string PostCode { get; set; } // PostCode
        public bool IsActive { get; set; } // IsActive
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child Inspections where [Inspections].[SiteId] point to this entity (FK_Inspections_Sites)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Inspections> Inspections { get; set; } // Inspections.FK_Inspections_Sites
        /// <summary>
        /// Child Locations where [Locations].[SiteId] point to this entity (FK_Locations_Sites)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Locations> Locations { get; set; } // Locations.FK_Locations_Sites

        // Foreign keys

        /// <summary>
        /// Parent Clients pointed by [Sites].([ClientId]) (FK_Sites_Clients)
        /// </summary>
        public virtual Clients Clients { get; set; } // FK_Sites_Clients

        public Sites()
        {
            IsActive = true;
            DateCreated = System.DateTime.Now;
            Inspections = new System.Collections.Generic.List<Inspections>();
            Locations = new System.Collections.Generic.List<Locations>();
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Users
    {
        public int Id { get; set; } // Id (Primary key)
        public string FirstName { get; set; } // FirstName
        public string Surname { get; set; } // Surname
        public string Email { get; set; } // Email
        public string Mobile { get; set; } // Mobile
        public string Password { get; set; } // Password
        public string PasswordSalt { get; set; } // PasswordSalt (length: 256)
        public bool IsAuthorised { get; set; } // IsAuthorised
        public bool Archived { get; set; } // Archived
        public System.DateTime DateModified { get; set; } // DateModified
        public int? ModifiedUserId { get; set; } // ModifiedUserId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int? CreatedUserId { get; set; } // CreatedUserId
        public int? SimProId { get; set; } // SimProId
        public bool IsAdmin { get; set; } // IsAdmin
        public string Position { get; set; } // Position (length: 500)
        public string Signature { get; set; } // Signature
        public int? LoginAttempts { get; set; } // LoginAttempts
        public bool IsLocked { get; set; } // IsLocked
        public System.DateTime? LockedDate { get; set; } // LockedDate
        public bool ClientPortalAccess { get; set; } // ClientPortalAccess

        // Reverse navigation

        /// <summary>
        /// Child Inspections where [Inspections].[UserId] point to this entity (FK_Inspections_Users)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Inspections> Inspections { get; set; } // Inspections.FK_Inspections_Users

        public Users()
        {
            IsAuthorised = false;
            Archived = false;
            DateModified = System.DateTime.Now;
            DateCreated = System.DateTime.Now;
            IsAdmin = false;
            IsLocked = false;
            ClientPortalAccess = false;
            Inspections = new System.Collections.Generic.List<Inspections>();
        }
    }

    #endregion

    #region POCO Configuration

    // ArchivedLocations
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArchivedLocationsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ArchivedLocations>
    {
        public ArchivedLocationsConfiguration()
            : this("dbo")
        {
        }

        public ArchivedLocationsConfiguration(string schema)
        {
            ToTable("ArchivedLocations", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocationName).HasColumnName(@"LocationName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // ArchivedSites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArchivedSitesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ArchivedSites>
    {
        public ArchivedSitesConfiguration()
            : this("dbo")
        {
        }

        public ArchivedSitesConfiguration(string schema)
        {
            ToTable("ArchivedSites", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsOptional();
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.Street).HasColumnName(@"Street").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsOptional();
        }
    }

    // A_Temp_InspectionItemMedia
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspectionItemMediaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ATempInspectionItemMedia>
    {
        public ATempInspectionItemMediaConfiguration()
            : this("dbo")
        {
        }

        public ATempInspectionItemMediaConfiguration(string schema)
        {
            ToTable("A_Temp_InspectionItemMedia", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InspectionItemId).HasColumnName(@"InspectionItemId").HasColumnType("int").IsOptional();
            Property(x => x.OldInspectionItemId).HasColumnName(@"OldInspectionItemId").HasColumnType("int").IsOptional();
            Property(x => x.Media).HasColumnName(@"Media").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsSynced).HasColumnName(@"IsSynced").HasColumnType("bit").IsOptional();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // A_Temp_InspectionItems
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspectionItemsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ATempInspectionItems>
    {
        public ATempInspectionItemsConfiguration()
            : this("dbo")
        {
        }

        public ATempInspectionItemsConfiguration(string schema)
        {
            ToTable("A_Temp_InspectionItems", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OldId).HasColumnName(@"OldId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionId).HasColumnName(@"InspectionId").HasColumnType("int").IsOptional();
            Property(x => x.OldInspectionId).HasColumnName(@"OldInspectionId").HasColumnType("int").IsOptional();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionItemStatusId).HasColumnName(@"InspectionItemStatusId").HasColumnType("int").IsOptional();
            Property(x => x.Findings).HasColumnName(@"Findings").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Recommendations).HasColumnName(@"Recommendations").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsSynced).HasColumnName(@"IsSynced").HasColumnType("bit").IsOptional();
            Property(x => x.ListingOrder).HasColumnName(@"ListingOrder").HasColumnType("int").IsOptional();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // A_Temp_Inspections
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ATempInspectionsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ATempInspections>
    {
        public ATempInspectionsConfiguration()
            : this("dbo")
        {
        }

        public ATempInspectionsConfiguration(string schema)
        {
            ToTable("A_Temp_Inspections", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OldId).HasColumnName(@"OldId").HasColumnType("int").IsOptional();
            Property(x => x.NewId).HasColumnName(@"NewId").HasColumnType("int").IsOptional();
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsOptional();
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.LocationId).HasColumnName(@"LocationId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionDate).HasColumnName(@"InspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.InspectionTypeId).HasColumnName(@"InspectionTypeId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionStatusId).HasColumnName(@"InspectionStatusId").HasColumnType("int").IsOptional();
            Property(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType("bit").IsOptional();
            Property(x => x.SyncDate).HasColumnName(@"SyncDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsOptional();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsOptional();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsOptional();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.SimProSyncDate).HasColumnName(@"SimProSyncDate").HasColumnType("datetime").IsOptional();
            Property(x => x.NextInspectionDate).HasColumnName(@"NextInspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // Categories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CategoriesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Categories>
    {
        public CategoriesConfiguration()
            : this("dbo")
        {
        }

        public CategoriesConfiguration(string schema)
        {
            ToTable("Categories", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CategoryName).HasColumnName(@"CategoryName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.CategoryOrder).HasColumnName(@"CategoryOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.Prefix).HasColumnName(@"Prefix").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // Certificates
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CertificatesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Certificates>
    {
        public CertificatesConfiguration()
            : this("dbo")
        {
        }

        public CertificatesConfiguration(string schema)
        {
            ToTable("Certificates", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.HeaderText).HasColumnName(@"HeaderText").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.FooterText).HasColumnName(@"FooterText").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // Clients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Clients>
    {
        public ClientsConfiguration()
            : this("dbo")
        {
        }

        public ClientsConfiguration(string schema)
        {
            ToTable("Clients", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsOptional();
        }
    }

    // ClientUserLoginCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientUserLoginCodesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClientUserLoginCodes>
    {
        public ClientUserLoginCodesConfiguration()
            : this("dbo")
        {
        }

        public ClientUserLoginCodesConfiguration(string schema)
        {
            ToTable("ClientUserLoginCodes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsRequired();
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
        }
    }

    // ClientUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientUsersConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClientUsers>
    {
        public ClientUsersConfiguration()
            : this("dbo")
        {
        }

        public ClientUsersConfiguration(string schema)
        {
            ToTable("ClientUsers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.LastLogin).HasColumnName(@"LastLogin").HasColumnType("datetime").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModified).HasColumnName(@"LastModified").HasColumnType("datetime").IsRequired();
            Property(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType("bit").IsRequired();
            Property(x => x.PreferredContact).HasColumnName(@"PreferredContact").HasColumnType("int").IsRequired();
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsAdmin).HasColumnName(@"IsAdmin").HasColumnType("bit").IsRequired();
            Property(x => x.PrivacyAgreement).HasColumnName(@"PrivacyAgreement").HasColumnType("bit").IsRequired();
        }
    }

    // Definitions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DefinitionsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Definitions>
    {
        public DefinitionsConfiguration()
            : this("dbo")
        {
        }

        public DefinitionsConfiguration(string schema)
        {
            ToTable("Definitions", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DefinitionTypeId).HasColumnName(@"DefinitionTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.AssociatedDefinitionId).HasColumnName(@"AssociatedDefinitionId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasRequired(a => a.Categories).WithMany(b => b.Definitions).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_Definitions_Categories
            HasRequired(a => a.DefinitionTypes).WithMany(b => b.Definitions).HasForeignKey(c => c.DefinitionTypeId).WillCascadeOnDelete(false); // FK_Definitions_DefinitionTypes
        }
    }

    // DefinitionTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DefinitionTypesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DefinitionTypes>
    {
        public DefinitionTypesConfiguration()
            : this("dbo")
        {
        }

        public DefinitionTypesConfiguration(string schema)
        {
            ToTable("DefinitionTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // DeviceMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DeviceMetaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DeviceMeta>
    {
        public DeviceMetaConfiguration()
            : this("dbo")
        {
        }

        public DeviceMetaConfiguration(string schema)
        {
            ToTable("DeviceMeta", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ReferenceType).HasColumnName(@"ReferenceType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ReferenceId).HasColumnName(@"ReferenceId").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AppVersion).HasColumnName(@"AppVersion").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Device).HasColumnName(@"Device").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.DeviceModel).HasColumnName(@"DeviceModel").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Os).HasColumnName(@"OS").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.OsVersion).HasColumnName(@"OSVersion").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Connection).HasColumnName(@"Connection").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ExtraData).HasColumnName(@"ExtraData").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
        }
    }

    // Documents
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Documents>
    {
        public DocumentsConfiguration()
            : this("dbo")
        {
        }

        public DocumentsConfiguration(string schema)
        {
            ToTable("Documents", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired();
            Property(x => x.MimeType).HasColumnName(@"MimeType").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsRequired();
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.LocationId).HasColumnName(@"LocationId").HasColumnType("int").IsOptional();
            Property(x => x.IsVisible).HasColumnName(@"IsVisible").HasColumnType("bit").IsRequired();
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionTypeId).HasColumnName(@"InspectionTypeId").HasColumnType("int").IsOptional();
            Property(x => x.DocumentAdditional).HasColumnName(@"DocumentAdditional").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.InspectionIds).HasColumnName(@"InspectionIds").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // DocumentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentType>
    {
        public DocumentTypeConfiguration()
            : this("dbo")
        {
        }

        public DocumentTypeConfiguration(string schema)
        {
            ToTable("DocumentType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
        }
    }

    // InspectionItemMedia
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItemMediaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionItemMedia>
    {
        public InspectionItemMediaConfiguration()
            : this("dbo")
        {
        }

        public InspectionItemMediaConfiguration(string schema)
        {
            ToTable("InspectionItemMedia", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InspectionItemId).HasColumnName(@"InspectionItemId").HasColumnType("int").IsRequired();
            Property(x => x.Media).HasColumnName(@"Media").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.IsSynced).HasColumnName(@"IsSynced").HasColumnType("bit").IsRequired();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsOptional();

            // Foreign keys
            HasRequired(a => a.InspectionItems).WithMany(b => b.InspectionItemMedia).HasForeignKey(c => c.InspectionItemId).WillCascadeOnDelete(false); // FK_InspectionItemMedia_InspectionItems
        }
    }

    // InspectionItems
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItemsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionItems>
    {
        public InspectionItemsConfiguration()
            : this("dbo")
        {
        }

        public InspectionItemsConfiguration(string schema)
        {
            ToTable("InspectionItems", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InspectionId).HasColumnName(@"InspectionId").HasColumnType("int").IsRequired();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.InspectionItemStatusId).HasColumnName(@"InspectionItemStatusId").HasColumnType("int").IsRequired();
            Property(x => x.Findings).HasColumnName(@"Findings").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Recommendations).HasColumnName(@"Recommendations").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsSynced).HasColumnName(@"IsSynced").HasColumnType("bit").IsRequired();
            Property(x => x.ListingOrder).HasColumnName(@"ListingOrder").HasColumnType("int").IsRequired();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RoofPitch).HasColumnName(@"RoofPitch").HasColumnType("decimal").IsOptional().HasPrecision(5,2);

            // Foreign keys
            HasRequired(a => a.Categories).WithMany(b => b.InspectionItems).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_InspectionItems_Categories
            HasRequired(a => a.InspectionItemStatus).WithMany(b => b.InspectionItems).HasForeignKey(c => c.InspectionItemStatusId).WillCascadeOnDelete(false); // FK_InspectionItems_InspectionItemStatus
            HasRequired(a => a.Inspections).WithMany(b => b.InspectionItems).HasForeignKey(c => c.InspectionId).WillCascadeOnDelete(false); // FK_InspectionItems_Inspections
        }
    }

    // InspectionItemStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionItemStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionItemStatus>
    {
        public InspectionItemStatusConfiguration()
            : this("dbo")
        {
        }

        public InspectionItemStatusConfiguration(string schema)
        {
            ToTable("InspectionItemStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
        }
    }

    // InspectionMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionMetaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionMeta>
    {
        public InspectionMetaConfiguration()
            : this("dbo")
        {
        }

        public InspectionMetaConfiguration(string schema)
        {
            ToTable("InspectionMeta", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InspectionId).HasColumnName(@"InspectionId").HasColumnType("int").IsRequired();
            Property(x => x.InspectionMetaValue).HasColumnName(@"InspectionMetaValue").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
        }
    }

    // InspectionReports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionReportsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionReports>
    {
        public InspectionReportsConfiguration()
            : this("dbo")
        {
        }

        public InspectionReportsConfiguration(string schema)
        {
            ToTable("InspectionReports", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InspectionId).HasColumnName(@"InspectionId").HasColumnType("int").IsRequired();
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsRequired();
        }
    }

    // Inspections
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Inspections>
    {
        public InspectionsConfiguration()
            : this("dbo")
        {
        }

        public InspectionsConfiguration(string schema)
        {
            ToTable("Inspections", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsRequired();
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.LocationId).HasColumnName(@"LocationId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionDate).HasColumnName(@"InspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.InspectionTypeId).HasColumnName(@"InspectionTypeId").HasColumnType("int").IsOptional();
            Property(x => x.InspectionStatusId).HasColumnName(@"InspectionStatusId").HasColumnType("int").IsOptional();
            Property(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType("bit").IsRequired();
            Property(x => x.SyncDate).HasColumnName(@"SyncDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.SimProSyncDate).HasColumnName(@"SimProSyncDate").HasColumnType("datetime").IsOptional();
            Property(x => x.NextInspectionDate).HasColumnName(@"NextInspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.Nonce).HasColumnName(@"Nonce").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.VisibleToClient).HasColumnName(@"VisibleToClient").HasColumnType("bit").IsRequired();
            Property(x => x.InspectionNotes).HasColumnName(@"InspectionNotes").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.ClientPortalOverride).HasColumnName(@"ClientPortalOverride").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.InspectionStatus).WithMany(b => b.Inspections).HasForeignKey(c => c.InspectionStatusId).WillCascadeOnDelete(false); // FK_Inspections_InspectionStatus
            HasOptional(a => a.InspectionType).WithMany(b => b.Inspections).HasForeignKey(c => c.InspectionTypeId).WillCascadeOnDelete(false); // FK_Inspections_InspectionType
            HasOptional(a => a.Locations).WithMany(b => b.Inspections).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // FK_Inspections_Locations
            HasOptional(a => a.Sites).WithMany(b => b.Inspections).HasForeignKey(c => c.SiteId).WillCascadeOnDelete(false); // FK_Inspections_Sites
            HasRequired(a => a.Users).WithMany(b => b.Inspections).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Inspections_Users
        }
    }

    // InspectionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionStatus>
    {
        public InspectionStatusConfiguration()
            : this("dbo")
        {
        }

        public InspectionStatusConfiguration(string schema)
        {
            ToTable("InspectionStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
        }
    }

    // InspectionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InspectionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionType>
    {
        public InspectionTypeConfiguration()
            : this("dbo")
        {
        }

        public InspectionTypeConfiguration(string schema)
        {
            ToTable("InspectionType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
        }
    }

    // Locations
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LocationsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Locations>
    {
        public LocationsConfiguration()
            : this("dbo")
        {
        }

        public LocationsConfiguration(string schema)
        {
            ToTable("Locations", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LocationName).HasColumnName(@"LocationName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.Sites).WithMany(b => b.Locations).HasForeignKey(c => c.SiteId).WillCascadeOnDelete(false); // FK_Locations_Sites
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LogsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Logs>
    {
        public LogsConfiguration()
            : this("dbo")
        {
        }

        public LogsConfiguration(string schema)
        {
            ToTable("Logs", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LogTypeId).HasColumnName(@"LogTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LogType).WithMany(b => b.Logs).HasForeignKey(c => c.LogTypeId).WillCascadeOnDelete(false); // FK_Logs_LogType
        }
    }

    // LogType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LogTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LogType>
    {
        public LogTypeConfiguration()
            : this("dbo")
        {
        }

        public LogTypeConfiguration(string schema)
        {
            ToTable("LogType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
        }
    }

    // Sites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class SitesConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sites>
    {
        public SitesConfiguration()
            : this("dbo")
        {
        }

        public SitesConfiguration(string schema)
        {
            ToTable("Sites", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsOptional();
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.Street).HasColumnName(@"Street").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.Clients).WithMany(b => b.Sites).HasForeignKey(c => c.ClientId).WillCascadeOnDelete(false); // FK_Sites_Clients
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class UsersConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Users>
    {
        public UsersConfiguration()
            : this("dbo")
        {
        }

        public UsersConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Surname).HasColumnName(@"Surname").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.IsAuthorised).HasColumnName(@"IsAuthorised").HasColumnType("bit").IsRequired();
            Property(x => x.Archived).HasColumnName(@"Archived").HasColumnType("bit").IsRequired();
            Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedUserId).HasColumnName(@"ModifiedUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedUserId).HasColumnName(@"CreatedUserId").HasColumnType("int").IsOptional();
            Property(x => x.SimProId).HasColumnName(@"SimProId").HasColumnType("int").IsOptional();
            Property(x => x.IsAdmin).HasColumnName(@"IsAdmin").HasColumnType("bit").IsRequired();
            Property(x => x.Position).HasColumnName(@"Position").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Signature).HasColumnName(@"Signature").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.LoginAttempts).HasColumnName(@"LoginAttempts").HasColumnType("int").IsOptional();
            Property(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType("bit").IsRequired();
            Property(x => x.LockedDate).HasColumnName(@"LockedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ClientPortalAccess).HasColumnName(@"ClientPortalAccess").HasColumnType("bit").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

